from flask import Flask, jsonify, Response, request
from flask_cors import CORS

app = Flask(__name__)

# Enable CORS for your production domains + localhost
CORS(
    app,
    resources={r"/*": {"origins": [
        "https://optilovesinvest.com",
        "https://www.optilovesinvest.com",
        "https://app.optilovesinvest.com",
        "http://localhost:3000"
    ]}},
    supports_credentials=False,
    allow_headers=["Content-Type", "Authorization"],
    methods=["GET", "POST", "OPTIONS"],
    max_age=86400
)

# Example route
@app.route("/properties", methods=["GET"])
def get_properties():
    data = [
        {"id": "kin-001", "title": "Kinshasa ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â Gombe Apartments"},
        {"id": "lua-001", "title": "Luanda ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â Ilha Offices"}
    ]
    return jsonify(data)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)

from solana_holdings import bp as holdings_bp
app.register_blueprint(holdings_bp)
@app.get('/api/portfolio/<owner>')
def portfolio_direct(owner):
    try:
        from solana_holdings import get_token_balance, MINTS
        rows = []
        for m in MINTS:
            bal = get_token_balance(owner, m["mint"])
            price = float(m.get("price", 0))
            rows.append({
                "propertyId": m["id"],
                "mint": m["mint"],
                "balance": bal,
                "price": price,
                "estValue": round(bal*price, 2)
            })
        return {"owner": owner, "items": rows}
    except Exception as e:
        return {"owner": owner, "items": [], "error": str(e)}, 200@app.get('/api/health')
def health():
    return {"ok": True}@app.get('/_routes')
def routes_dump():
    try:
        return {"routes": sorted([r.rule for r in app.url_map.iter_rules()])}
    except Exception as e:
        return {"error": str(e)}, 200
@app.get("/account")
def account():
    return Response("""<!doctype html>
<html><head><meta charset="utf-8"><title>Optiloves â€” Dashboard</title>
<style>body{font:14px system-ui;margin:20px}table{border-collapse:collapse;margin-top:12px}td,th{border:1px solid #ddd;padding:6px 8px}</style>
</head><body>
<h2>Portfolio</h2>
<input id="w" placeholder="Phantom public key" style="width:420px">
<button onclick="load()">Load</button>
<div id="out"></div>
<script>
async function load(){
  const w=document.getElementById('w').value.trim();
  if(!w){alert('Enter wallet');return;}
  const r=await fetch(`/api/portfolio/${w}`);
  if(!r.ok){document.getElementById('out').textContent='Error '+r.status;return;}
  const j=await r.json();
  const rows=j.items||[];
  let total=0; rows.forEach(x=> total+= (x.estValue||0));
  let html = `<p><b>Owner:</b> ${j.owner}</p><p><b>Total:</b> ${total.toFixed(2)}</p>`;
  html += '<table><tr><th>Property</th><th>Mint</th><th>Balance</th><th>Price</th><th>Est. Value</th></tr>';
  for (const x of rows){
    html += `<tr><td>${x.propertyId}</td><td>${x.mint}</td><td>${x.balance}</td><td>${x.price}</td><td>${x.estValue}</td></tr>`;
  }
  html += '</table>';
  document.getElementById('out').innerHTML=html;
}
</script>
</body></html>""", mimetype="text/html")import os, uuid
KYC_STATE = {}  # in-memory MVP; replace with DB later

@app.get("/api/kyc/status")
def kyc_status():
    wallet = (request.args.get("wallet") or "").strip()
    if not wallet: return {"error":"wallet required"}, 400
    st = KYC_STATE.get(wallet, "none")
    ref = os.environ.get(f"KYC_LAST_REF_{wallet}", "")
    return {"wallet": wallet, "status": st, "ref": ref}

@app.get("/api/kyc/start")
def kyc_start():
    wallet = (request.args.get("wallet") or "").strip()
    if not wallet: return {"error":"wallet required"}, 400
    sess = str(uuid.uuid4())
    KYC_STATE[wallet] = "pending"
    os.environ[f"KYC_LAST_REF_{wallet}"] = sess
    base = os.environ.get("KYC_VENDOR_URL","https://kyc-sandbox.example/flow")
    url = f"{base}?wallet={wallet}&session={sess}"
    return {"wallet": wallet, "status":"pending", "url": url}

@app.post("/webhooks/kyc")
def kyc_webhook():
    secret = os.environ.get("KYC_WEBHOOK_SECRET","")
    sig = request.headers.get("X-KYC-Signature","")
    if not secret or sig != secret:
        return {"ok": False, "error":"bad signature"}, 401
    data = request.get_json(silent=True) or {}
    wallet = (data.get("wallet") or "").strip()
    status = (data.get("status") or "").strip()
    if not wallet or status not in ("approved","rejected","resubmit","pending"):
        return {"ok": False, "error":"bad payload"}, 400
    KYC_STATE[wallet] = status
    return {"ok": True}
